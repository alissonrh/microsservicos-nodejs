# ğŸŸ¢ Etapa base comum para reutilizar em outras fases
FROM node:lts-alpine AS base
# Usa imagem Node.js leve baseada no Alpine Linux
# DÃ¡ o nome 'base' a essa etapa, pra reutilizar depois

# ---------

# ğŸ§ª Etapa de instalaÃ§Ã£o das dependÃªncias (sem cÃ³digo da aplicaÃ§Ã£o ainda)
FROM base AS deps
WORKDIR /app 

# Copia apenas os arquivos de dependÃªncia (package.json e package-lock.json)
COPY package*.json ./

# Instala sÃ³ as dependÃªncias de produÃ§Ã£o (sem devDependencies)
RUN npm install --omit=dev 
# Isso reduz o tamanho da imagem final, jÃ¡ que nÃ£o inclui dependÃªncias de desenvolvimento
# Isso Ã© Ãºtil para manter a imagem leve e rÃ¡pida para produÃ§Ã£o

# ---------

# ğŸš€ Etapa final (imagem que realmente serÃ¡ usada em produÃ§Ã£o)
FROM base AS runner
WORKDIR /app

# Define a variÃ¡vel de ambiente NODE_ENV como 'production'
ENV NODE_ENV=production

# Cria um grupo e usuÃ¡rio seguros para rodar a aplicaÃ§Ã£o
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 api

# DÃ¡ permissÃ£o ao usuÃ¡rio 'api' para acessar o diretÃ³rio atual
RUN chown api:nodejs .

# Copia **todos os arquivos do projeto** pro container, mantendo as permissÃµes do usuÃ¡rio criado
COPY --chown=api:nodejs . .

# Copia a pasta node_modules da etapa de dependÃªncias para cÃ¡
COPY --from=deps /app/node_modules ./node_modules

# Usa o usuÃ¡rio 'api' (nÃ£o-root) para executar a aplicaÃ§Ã£o
USER api

# ExpÃµe a porta 3333 para acesso externo ao container
EXPOSE 3333

# Define variÃ¡veis de ambiente usadas pela aplicaÃ§Ã£o
ENV PORT=3333
ENV HOSTNAME="0.0.0.0"

# Comando que serÃ¡ executado quando o container for iniciado
ENTRYPOINT ["npm", "run", "start"]
